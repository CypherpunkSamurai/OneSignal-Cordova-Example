name: Build the app


on:
  workflow_dispatch:



jobs:
  build:
    name: Build the app
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - uses: actions/setup-node@v1
      with:
        node-version: '10.x'

    - run: npm install

    - name: Update package list
      run: sudo apt update

    - name: Install gradle
      run: sudo apt install gradle

    - name: Install jq
      run: sudo apt install jq

    - name: Save revision and branch
      run: |
        echo "::set-env name=SHORT_REV::$(git rev-parse --short HEAD)"
        echo "::set-env name=LONG_REV::$(git rev-parse HEAD)"
        echo "::set-env name=BRANCH::$(sed 's/-/_/g' <<< `git rev-parse --abbrev-ref HEAD`)"

    - name: Install cordova
      run: |
        sudo npm config set unsafe-perm true && \
        sudo npm install -g cordova

    - name: Setup build type
      run: echo "::set-env name=BUILD_TYPE::debug"
      env:
        BUILD_TYPE: release


    - name: Add Platform android 
      run: cordova platform add android

    - name: Zip Current Folder for Bkp
      run: zip -r CodeBackup.zip *


    - name: Zip Current Directory
      run: rm CodeBackup.zip


    - name: Build with cordova
      run: cordova build android --${BUILD_TYPE}

    - name: Create env variable APP_VERSION
      run: echo "::set-env name=APP_VERSION::$(cat package.json | jq -r '.version')"

    - name: Create env variable APP_NAME
      run: echo "::set-env name=APP_NAME::cordova-onesignal-${BUILD_TYPE}-${SHORT_REV}.apk"


    - name: Rename apk to APP_NAME
      run: mv platforms/android/app/build/outputs/apk/*/*.apk ${APP_NAME}

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false

    - name: Upload Release Asset
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: ${APP_NAME}
        asset_name: Release.apk
        asset_content_type: application/zip
